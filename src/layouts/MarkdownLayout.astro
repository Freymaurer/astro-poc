---
import Layout from './BaseLayout.astro';

export interface Heading {
  depth: number;
  slug: string;
  text: string
}

interface NestedHeading extends Heading {
  children?: NestedHeading[];
}

// Function to build a nested structure from flat headings
function buildNestedHeadings(headings: Heading[]): NestedHeading[] {
  const root: NestedHeading[] = [];
  const stack: NestedHeading[] = [];
  if (!headings) return root;
  for (const heading of headings) {
    const newNode: NestedHeading = { ...heading, children: [] };

    while (stack.length > 0 && stack[stack.length - 1].depth >= heading.depth) {
      stack.pop(); // pop elements from the stack until the correct depth is found
    }

    if (stack.length === 0) {
      // If the stack is empty, add the node to the root
      root.push(newNode);
    } else {
      // If not, add it as a child to the last element in the stack
      stack[stack.length - 1].children!.push(newNode);
    }

    stack.push(newNode); // Push the current node onto the stack
  }

  return root;
}

const { frontmatter, headings } = Astro.props;

function createTagLink(tag: string) {
  return `/arc-website/details/tags/${tag}`;
}

// Generate the nested headings structure
const nestedHeadings = buildNestedHeadings(headings);
const noInPageNavigation = nestedHeadings.length === 0;
---

<script>
document.addEventListener("DOMContentLoaded", function () {
    const marker = document.getElementById('nav-marker');
    const mdContent = document.getElementById('md-content');
    const headers = mdContent?.querySelectorAll('h1, h2, h3, h4, h5, h6');  // Select all headers

    if (!headers) return;

    const OFFSET = 100;  // Offset for considering a header 'in view'

    function updateMarker(linkId: string) {

        const link = document.getElementById(linkId);
        const container = document.getElementById("in-page-nav-container");
        if (!link || !container || !marker) return;
        const containerRect = container.getBoundingClientRect();
        const rect = link.getBoundingClientRect();

        // Adjust the marker's position and size relative to the link
        marker.style.top = (rect.top - containerRect.top + 4) + 'px';
        marker.style.height = (rect.height + 8) + 'px';
    }

    // Function to find the active header and move the marker accordingly
    function handleScroll() {
        let activeLinkId = '';
        headers?.forEach(header => {
            const rect = header.getBoundingClientRect();
            const headerId = header.id;
            const navLinkId = `${headerId}-nav`;
            // If the header's top is in the viewport with some offset (50px from top)
            if (rect.top <= OFFSET && rect.bottom >= OFFSET) {
                activeLinkId = navLinkId;
            }
        });

        if (activeLinkId) {
            updateMarker(activeLinkId);
        }
    }

    // Initially set the marker to the first navigation link
    updateMarker(`${headers[0].id}-nav`);

    // Listen for scroll events
    window.addEventListener('scroll', handleScroll);
});

</script>

<Layout title={frontmatter.title} drawerIsOpen={true}>
  <div class="navbar sticky top-0 bg-base-300 z-20 min-h-[unset] lg:hidden" class:list={[{hidden: noInPageNavigation}]}>
    <div class="flex-1">
      <!-- <a class="btn btn-ghost btn-sm">daisyUI</a> -->
    </div>
    <div class="flex-none">
      <div class="dropdown static">
        <div tabindex="0" role="button" class="btn btn-ghost btn-sm m-1">
          in page
        </div>
        <ul tabindex="0" class="dropdown-content menu bg-base-200 z-[1] p-2 shadow left-4 right-4 max-h-[80vh] rounded overflow-y-auto">
          {nestedHeadings.map((heading) => (
            <li>
              <a href={`#${heading.slug}`}>{heading.text}</a>
              {heading.children && heading.children.length > 0 && (
                <ul>
                  {heading.children.map((child) => (
                    <li>
                      <a href={`#${child.slug}`}>{child.text}</a>
                      {child.children && child.children.length > 0 && (
                        <ul>
                          {child.children.map((subChild) => (
                            <li>
                              <a href={`#${subChild.slug}`}>{subChild.text}</a>
                            </li>
                          ))}
                        </ul>
                      )}
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))}
        </ul>
      </div>
    </div>
  </div>
  <div class="flex grow lg:py-5 flex-row items-start relative">
    <!-- <div id="md-layout-left" class="w-[20%] h-full hidden lg:block"></div> -->
    <div id="md-layout-left" class="w-[20%] h-full hidden"></div>
    <div id="md-layout-center" class="w-full lg:w-[70%] flex justify-center">
      <article class="prose lg:prose-lg xl:prose-xl grow p-5 overflow-hidden sm:overflow-visible">
        <h1>{frontmatter.title}</h1>
        <!-- <p class="subtitle">Written by {frontmatter.author}</p> -->
        <div class="gap-2 flex flex-wrap">
          {frontmatter.tags && frontmatter.tags.map((tag: string) => (
            <small class="text-teal-900 hover:underline"><a href={createTagLink(tag)}>{tag}</a></small>
          ))}
        </div>
        <div id="md-content" class="text-justify">
          <slot />
        </div>
      </article>
    </div>
    <div id="md-layout-right" class="w-[30%] sticky top-16 hidden lg:block">
      <div class:list={[{hidden: noInPageNavigation}]}>
        <div class="menu menu-xs h-full">
          <div id="nav-marker" class="bg-primary"></div>
          <ul tabindex="0" id="in-page-nav-container" class="z-[1] p-2 max-h-[80vh] overflow-y-auto border-l-2">
            {nestedHeadings.map((heading) => (
              <li>
                <a id={heading.slug + "-nav"} href={`#${heading.slug}`}>{heading.text}</a>
                {heading.children && heading.children.length > 0 && (
                  <ul>
                    {heading.children.map((child) => (
                      <li>
                        <a id={child.slug + "-nav"} href={`#${child.slug}`}>{child.text}</a>
                        {child.children && child.children.length > 0 && (
                          <ul>
                            {child.children.map((subChild) => (
                              <li>
                                <a id={subChild.slug + "-nav"} href={`#${subChild.slug}`}>{subChild.text}</a>
                              </li>
                            ))}
                          </ul>
                        )}
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style is:global>

  #md-content .tooltip::before {
    width: 24ch !important;
  }

  @media screen and (max-width:450px) {
  /* Bei jedem größeren Monitor kommen neue Regeln hinzu */
    #md-content .tooltip::before {
      width: unset !important;
    }
  }

  #md-content .anchor-link {
    @apply text-accent
  }

  #md-content h1,
  #md-content h2,
  #md-content h3,
  #md-content h4,
  #md-content h5,
  #md-content h6 {
    text-align: left !important;
  }

  .starlight-aside {
    margin-top: 1rem;
    margin-bottom: 1rem;
    padding: 1rem;
    border-inline-start: 0.25rem solid var(--sl-color-asides-border);
    color: var(--sl-color-text);
  }
  .starlight-aside--note {
    --sl-color-asides-text-accent: #00463e;
    --sl-color-text: oklch(var(--pc));
    --sl-color-asides-border: oklch(var(--p)) ;
    background-color: #00dbc4;
  }
  .starlight-aside--tip {
    --sl-color-asides-text-accent: #005476;
    --sl-color-text: oklch(var(--inc));
    --sl-color-asides-border: oklch(var(--in));
    background-color: #4eccff;
  }
  .starlight-aside--caution {
    --sl-color-asides-text-accent: #765800;
    --sl-color-text: oklch(var(--wac));
    --sl-color-asides-border: oklch(var(--wa));
    background-color: #ffd762;
  }
  .starlight-aside--danger {
    --sl-color-asides-text-accent: #ba000a;
    --sl-color-text: oklch(var(--erc));
    --sl-color-asides-border: oklch(var(--er));
    background-color: #ff9399;
  }

  .starlight-aside__title {
    display: flex;
    gap: 0.5rem;
    margin: unset;
    align-items: center;
    font-size: var(--sl-text-h5);
    font-weight: 600;
    line-height: var(--sl-line-height-headings);
    color: var(--sl-color-asides-text-accent);
  }

  .starlight-aside__icon {
    font-size: 1.333em;
    width: 1em;
    height: 1em;
  }

  .starlight-aside__title + .starlight-aside__content {
    margin-top: 0.5rem;
  }

  .starlight-aside__content a {
    color: var(--sl-color-asides-text-accent);
  }

  .starlight-aside__content *:first-child {
    margin-top: 0;
  }

  .starlight-aside__content *:last-child {
    margin-bottom: 0;
  }

  h1:not([subtitle]),
  h2:not([subtitle]),
  h3:not([subtitle]),
  h4:not([subtitle]),
  h5:not([subtitle]),
  h6:not([subtitle]) { 
    
  }

  h1:has(+ .subtitle),
  h2:has(+ .subtitle),
  h3:has(+ .subtitle),
  h4:has(+ .subtitle),
  h5:has(+ .subtitle),
  h6:has(+ .subtitle) {
    margin-bottom: 0; /* Remove bottom margin when followed by a subtitle */
  }

  .subtitle {
    @apply text-lg font-medium text-gray-600 mb-2 mt-0;
  }

</style>

<style>

  #nav-marker {
    position: absolute;
    left: 0.5rem;
    top: 1rem;
    width: 2px;
    height: 0;
    transition: top 0.3s, height 0.3s;
    z-index: 50;
  }

  html {
    scroll-behavior: smooth;
    scroll-padding: 4rem
  }

  .dropdown div.btn:after {
    justify-self: end;
    display: block;
    margin-top: -.5rem;
    height: .5rem;
    width: .5rem;
    transform: rotate(45deg);
    transition-property: transform, margin-top;
    transition-duration: .3s;
    transition-timing-function: cubic-bezier(.4,0,.2,1);
    content: "";
    transform-origin: 75% 75%;
    box-shadow: 2px 2px;
    pointer-events: none;
  }

  .dropdown div.btn:focus::after {
    transform: rotate(225deg);
    margin-top: 0;
  }
</style>
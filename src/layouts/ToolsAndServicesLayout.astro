---
import MarkdownLayout from "./MarkdownLayout.astro";
import ToolComponent from "../components/ToolComponent.astro";
import {type Heading} from "./MarkdownLayout.astro";
import { string } from "astro:schema";
// @ts-ignore  
import { MarkdownInstance } from "astro";

const files : MarkdownInstance<Record<string,any>> [] = await Astro.glob('../pages/details/tools-and-services/*.md');
const { frontmatter, headings } = Astro.props;

function groupBy<T>(iterable: Iterable<T>, fn: (item: T) => string | number) {
  return [...iterable].reduce<Record<string, T[]>>((groups, curr) => {
    const key = fn(curr);
    const group = groups[key] ?? [];
    group.push(curr);
    return { ...groups, [key]: group };
  }, {});
}

// might in the future control by frontmatter on the top level md file
const categoryOrders = new Map<string, number>([
  ["Applications", 1],
  ["Services", 2],
  ["CLI Tools", 3],
  ["Libraries", 4]
]);

const getCategoryOrder = (category: string) => categoryOrders.get(category) ?? 42069;

const groupedAndSorted : [string, MarkdownInstance<Record<string,any>>[]][] = 
  Object.entries(
    groupBy(files, (file) => file.frontmatter.category)
  )
  .sort(([categoryA], [categoryB]) => getCategoryOrder(categoryA) - getCategoryOrder(categoryB))
  .map(([category, tools]) => [category, tools.sort((a, b) => (a.frontmatter.position ?? 42069) - (b.frontmatter.position ?? 42069))])

const sortedFileHeadings =
  groupedAndSorted
    .map(([category, tools]) => 
      [
        { depth: 1, text: "#" + category, slug: category } as Heading,
        ...tools
        .map((tool) => ({ depth: 2, text: "#" + tool.frontmatter.title, slug: tool.frontmatter.slug } as Heading))
      ]
    )
    .flat()

const safeHeadings = (headings ?? [])

const headingsAppended = [
  ...safeHeadings, 
  ...sortedFileHeadings
]



---

<MarkdownLayout frontmatter={frontmatter} headings={headingsAppended}>
  <slot />
  {
    groupedAndSorted
    .map(([category, tools]) => (
      <div>
        <h2 id={category} class="anchor"><a href={"#" + category} class="anchor-link">#</a>{category}</h2>
        {
          tools
          .map((tool) => (
            <ToolComponent toolProps={tool.frontmatter} html={tool.compiledContent()}>
            </ToolComponent>
          ))
        }
      </div>
    ))
  }

</MarkdownLayout>

---

const { number, id, width, dataUrl, dataAccess, isBytes, x } = Astro.props;

---

<script define:vars={{number, id, dataUrl, dataAccess, isBytes}}>

function getNestedProperty(obj, path) {
  return path.reduce((current, key) => {
    if (current && typeof current === 'object' && key in current) {
      return current[key];
    }
    return undefined; // Return undefined if the path is not valid
  }, obj);
}

function createEaseOutArray(max0, count = 20) {
    let max;
    if (!isBytes) {
        max = max0;
    } else {
        const divisor = 1e+9;
        max = max0 / divisor; 
    }
    const numbers = [];

    for (let i = 0; i < count; i++) {
        // Ease-out effect: start with larger numbers and gradually reduce the increment.
        // Use an exponential scale to get that effect.
        let t = i / (count - 1); // Normalize `i` between 0 and 1.
        
        // Apply an ease-out function (exponential curve)
        let easeOutFactor = Math.pow(t, 4); // Stronger ease-out by using exponent 4
        
        // Generate the number based on the ease-out factor
        let number = Math.round(easeOutFactor * max);
        
        numbers.push(number);
    }

    return numbers;
}

const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

async function incrementNumberFromData(ele, url) {
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Response status: ${response.status}`);
    }

    const json = await response.json();

    const number = dataAccess.map((access) => getNestedProperty(json, access)).reduce((a, b) => a + b, 0);
    const numberArray = createEaseOutArray(number, 15)

    incrementNumber(ele, numberArray);
  } catch (error) {
    console.error(error.message);
  }
}

// Function to update the innerHTML with the next number from easeOutArray
async function incrementNumber(ele, numbers) {
  await sleep(200)
  for (let i = 0; i < numbers.length; i++) {
    ele.innerHTML = numbers[i];  // Set the next number
    await sleep(50);  // Wait for 50 ms before moving to the next number
  }
}

document.addEventListener("DOMContentLoaded", function () { 
  const ele = document.getElementById(id + "-number");
  if (dataUrl && dataAccess) {
    incrementNumberFromData(ele, dataUrl);
  } else if (number) {
    const numberArray = createEaseOutArray(number, 15);
    incrementNumber(ele, numberArray);
  }
});

</script>

<tspan id={id} style={{width: (width || "auto")}} dy="1.2em" x={x-20}>
  <tspan id={id + "-number"}>0</tspan> {isBytes && "GB"}
</tspan>
